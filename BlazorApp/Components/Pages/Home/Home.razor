@page "/"
@rendermode InteractiveServer

@using JokeUI.Models
@inject JokeUI.Services.JokeService JokeService
@inject ILogger<Home> Logger


<div class="container">
    <h1 class="section-heading">Welcome to the Joke Manager</h1>

    @* <input id="newJoke" @bind="newJokeContent" placeholder="Enter your joke here..." class="input-field" />
    <input id="newJoke" @bind="newJokeCategory" placeholder="Ente
    r category here..." class="input-field" /> *@


    @* <button class="button" @onclick="AddJoke">Add Joke</button> *@
    <button class="button" @onclick="GetRandomJoke">Get Random Joke</button>

    <h2>Random Joke</h2>
    @{
        if (randomJoke != null)
        {
            <p>@randomJoke.Content</p>
            <p>@randomJoke.Category</p>
        }
    }


    @* <div class="preview">
    <h2 class="section-heading">Preview</h2>
    <p>@newJokeContent</p>
    </div> *@

    @* <div class="joke-list">
    <h2 class="section-heading">Jokes</h2>
    @if (jokes == null)
    {
    <p><em>Loading...</em></p>
    }

    else
    {
    <ul class="joke-list">
    @foreach (var joke in jokes)
    {
    <li class="joke-item">@joke.Content - @joke.Category</li>
    }
    </ul>
    }
    </div> *@
</div>

@code {
    private int currentCount = 0;

    private string newJokeContent = string.Empty;
    private string newJokeCategory = string.Empty;
    private Joke randomJoke;
    private List<Joke> jokes;



    @* private async Task AddJoke()
{
var newJoke = new Joke { Content = newJokeContent, Category = newJokeCategory };
var createdJoke = await JokeService.AddJoke(newJoke);

jokes.Add(createdJoke);
newJokeContent = string.Empty;
} *@

    private async Task GetRandomJoke()
    {
        randomJoke = await JokeService.GetRandomJoke();
        Logger.LogWarning($"Someone has clicked me! Received joke: {randomJoke.Content}");
        StateHasChanged();
    }
}