name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: "20"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Run script
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

          # Function to copy directory to a new branch
           copy_to_branch() {
             dir=$1
             branch=$2
             dirToRemove=$3

             # Check if the branch exists remotely
             if git ls-remote --heads origin $branch | grep $branch > /dev/null; then
                # If the branch exists remotely, delete it
                git push origin --delete $branch
             fi
             
            # Get the name of the branch that triggered the workflow
             current_branch=${GITHUB_REF#refs/heads/}

            # Create a new branch from the current branch and switch to it
             git checkout -b $branch $current_branch

            # Check if the to remove directory exists
             if [ -d "$dirToRemove" ]; then
                # If the BlazorApp directory exists, remove it
                rm -rf $dirToRemove
                rm -rf .github
                rm -rf .vscode
                rm -rf Tests

                # Stage the changes
                git add .
             fi

            # If there are no changes to commit, print a message
             if git diff --quiet && git diff --staged --quiet; then
                echo "No changes to commit"
             else
                # If there are changes to commit, make a commit
                git commit -m "Git Actions Update To $branch"
             fi

             # Push the branch to the remote repository
              git push --force https://$PAT@github.com/boop-bap/JokeManagerMonoRepo.git $branch

             # Checkout back to the branch that triggered the workflow
              git checkout $current_branch
             }

             # Call the function for each directory
             if [[ "${GITHUB_REF#refs/heads/}" == "main" ]]; then
               copy_to_branch 'API' 'main-isolated-api' 'BlazorApp'
               copy_to_branch 'BlazorApp' 'main-isolated-blazorapp' 'API'
             else
               copy_to_branch 'API' 'dev-isolated-api' 'BlazorApp'
               copy_to_branch 'BlazorApp' 'dev-isolated-blazorapp' 'API'
             fi
